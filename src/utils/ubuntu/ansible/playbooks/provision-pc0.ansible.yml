---
- hosts: pc0
  become: yes
  become_user: root
  tasks:
    - name: Set iptables to legacy
      shell: "update-alternatives --set iptables /usr/sbin/iptables-legacy"

    - name: Set iptables6 to legacy
      shell: "update-alternatives --set ip6tables /usr/sbin/ip6tables-legacy"

    - name: Update cache to make sure everything is fresh
      apt:
        update_cache: yes

    - name: turn off the swap file
      systemd:
        name: dphys-swapfile
        enabled: no
        masked: yes

    - name: Remove swapfile package
      apt:
        name: ["dphys-swapfile"]
        state: absent
      register: swap

    - block:
        - name: Add cgroups to cmdline.txt
          lineinfile:
            dest: /boot/cmdline.txt
            regexp: "(^console=serial0,115200 console=tty1)(.*)"
            line: '\1 cgroup_enable=memory cgroup_enable=cpuset\2'
            backrefs: yes
          when: swap.changed

    # Reboot nodes for swap changes to take effect
    # - block:
    # - name: Reboot the worker nodes if swap was removed.
    #   shell: "reboot"
    #   ignore_errors: True

    # - name: Wait for the reboot and reconnect
    #   wait_for:
    #     port: 22
    #     host: pc0
    #     search_regex: OpenSSH
    #     delay: 10
    #     timeout: 60
    #   connection: local

    - name: Check to see if Docker is already installed
      shell: dpkg-query -W 'docker'
      ignore_errors: True
      register: is_docker

    # Docker install. Skip if already installed
    - block:
        - name: install latest docker.io
          apt:
            name: ["docker.io"]
            state: present

        - name: Create docker daemon file
          blockinfile:
            dest: /etc/docker/daemon.json
            block: |
              {
                "exec-opts": ["native.cgroupdriver=systemd"],
                "log-driver": "json-file",
                "log-opts": {
                  "max-size": "100m"
                },
                "storage-driver": "overlay2"
              }
            create: yes
            marker: ""
          ignore_errors: True

        - name: Make docker.service.d directory
          shell: "mkdir -p /etc/systemd/system/docker.service.d"

        - name: restart docker
          systemd:
            state: restarted
            daemon_reload: yes
            name: docker

        - name: hold docker.io so it's not upgraded
          shell: "apt-mark hold docker.io"

        - name: Append picocluster to docker Group
          user:
            name: picocluster
            groups: docker
            append: yes
          register: group
      when: is_docker is failed

    - name: Check to see if Kubernetes is already installed
      shell: dpkg-query -W 'kubeadm'
      ignore_errors: True
      register: is_kubernetes

    # Kubernetes install. Skip if already installed
    - block:
        - name: Install Kubernetes repository key
          shell: "curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -"

        - name: Add Kubernetes source for apt
          lineinfile:
            dest: /etc/apt/sources.list.d/kubernetes.list
            line: "deb http://apt.kubernetes.io/ kubernetes-xenial main"
            create: yes

        - name: Update cache to get kubernetes
          apt:
            update_cache: yes

        - name: Install Kubernetes
          apt:
            name:
              [
                "kubeadm=1.20.5-00",
                "kubectl=1.20.5-00",
                "kubelet=1.20.5-00",
                "kubernetes-cni=0.7.5-00",
              ]
            state: present

        - name: hold kubelet kubeadm kubectl so they are not upgraded
          shell: "apt-mark hold kubelet kubeadm kubectl"
          register: kubernetes_install

      when: is_kubernetes is failed

    # Execute commands on pc0
    - block:
        - name: Stop kubelet service
          command: sudo systemctl stop kubelet.service

        - name: Reload daemon
          command: sudo systemctl daemon-reload

        - name: Reset kubeadm
          command: sudo kubeadm reset

        - name: Backup kube config
          command: mv ~/.kube/config ~/.kube/config.bak
          args:
            chdir: /home/picocluster

        - name: Generate token
          shell: |
            TOKEN=$(sudo kubeadm token generate)
            echo "Token: $TOKEN"
            echo "export TOKEN=$TOKEN" >> ~/.bashrc
          register: token_output

        - debug:
            var: token_output.stdout_lines

        - name: Initialize kubeadm
          command: sudo kubeadm init \
            --token={{ token_output.stdout_lines[0] }} \
            --pod-network-cidr=10.244.0.0/16
            --ignore-preflight-errors=Mem

        - name: Copy admin.conf
          command: sudo cp -i /etc/kubernetes/admin.conf /home/picocluster/.kube/config

        - name: Change ownership of admin.conf
          command: sudo chown $(id -u):$(id -g) /home/picocluster/.kube/config

        - name: Install Flannel networking
          shell: |
            curl -sSL https://rawgit.com/coreos/flannel/v0.11.0/Documentation/kube-flannel.yml | kubectl create -f -
          args:
            executable: /bin/bash
